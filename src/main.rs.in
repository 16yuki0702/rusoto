use std::fs::File;
use std::io::Read;
use std::collections::HashMap;

#[derive(Serialize, Deserialize, Debug)]
struct HttpRequest {
	method: String,
	requestUri: String
}

#[derive(Serialize, Deserialize, Debug)]
struct InputOutput {
	shape: String,
	documentation: Option<String>
}

#[derive(Serialize, Deserialize, Debug)]
struct Error {
	shape: String,
	exception: bool,
	fault: Option<bool>,
	documentation: Option<String>
}

#[derive(Serialize, Deserialize, Debug)]
struct Member {
	shape: String,
	documentation: Option<String>
}

#[derive(Serialize, Deserialize, Debug)]
struct Key {
	shape: String
}


#[derive(Serialize, Deserialize, Debug)]
struct Value {
	shape: String
}

#[derive(Serialize, Deserialize, Debug)]
struct Shape {
	#[serde(rename="type")]
	shape_type: String,
	#[serde(rename="enum")]
	shape_enum: Vec<String>,
	required: Vec<String>,
	members: HashMap<String, Member>,
	member: Option<Member>,
	key: Option<Key>,
	value: Option<Value>,
	min: Option<i32>,
	max: Option<i32>,
	pattern: Option<String>,
	exception: Option<bool>,
	fault: Option<bool>,
	documentation: Option<String>
}

#[derive(Serialize, Deserialize, Debug)]
struct Operation {
	name: String,
	http: HttpRequest,
	input: InputOutput,
	output: InputOutput,
	errors: Vec<Error>,
	documentation: Option<String>
}

#[derive(Serialize, Deserialize, Debug)]
struct Metadata {
	apiVersion: String,
    endpointPrefix: String,
    jsonVersion: String, 
    serviceAbbreviation: String,
    serviceFullName: String,
    signatureVersion: String,
    targetPrefix: String,
    protocol: String
}

#[derive(Serialize, Deserialize, Debug)]
struct Service {
	version: String,
	metadata: Metadata,
	documentation: Option<String>,
	operations: HashMap<String, Operation>,
	shapes: HashMap<String, Shape>,
	examples: HashMap<String, String>
}
fn main() {

	let mut f = File::open("/home/adimarco/code/rusoto/codegen/botocore/botocore/data/dynamodb/2012-08-10/service-2.json").unwrap();
	let mut s = String::new();
	let _ = f.read_to_string(&mut s);

    let deserialized: Service = serde_json::from_str(&s).unwrap();

    println!("{:#?}", deserialized);
}
